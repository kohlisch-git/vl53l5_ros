#!/usr/bin/env python
PACKAGE = "versuch2_tof"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

resolution_enum = gen.enum([
    gen.const("4x4", int_t, 1,  "Select 4x4 resolution for sensor"),
    gen.const("8x8", int_t, 0,  "Select 8x8 resolution for sensor")
],                              "Select a resolution for the sensor")

range_mode_enum = gen.enum([
    gen.const("continuous", int_t, 1,  "Set the ranging mode to continuous"),
    gen.const("autonomous", int_t, 0,  "Set the ranging mode to autonomous")
],                                     "Select the ranging mode for the sensor")

target_order_enum = gen.enum([
    gen.const("closest",    int_t, 0,  "The closest target is the first reported"),
    gen.const("strongest",  int_t, 1,  "The strongest target is the first reported")
],                                     "Select the target order for the sensor")

gen.add("resolution",       int_t, 0, "Set the resolution of the sensor", 1, 0, 1, edit_method = resolution_enum)
gen.add("frequency",        int_t, 0, "Set the ranging frequency of the sensor", 15, 1, 60)
gen.add("ranging_mode",     int_t, 0, "Select the ranging mode for the sensor", 0, 0, 1, edit_method = range_mode_enum)
gen.add("integration_time", int_t, 0, "Set the integration time (for autonomous mode only)", 5, 2, 1000)
gen.add("sharpener",        int_t, 0, "Set the sharpener in percent", 5, 0, 99)
gen.add("target_order",     int_t, 0, "Select the target order for the sensor", 0, 0, 1, edit_method = target_order_enum)
#gen.add("power_on",        bool_t, 0, "Enable power on to boot senor", False)
gen.add("sensor_to_sleep", bool_t, 0, "Put sensor in sleep mode without powering down senor (configuration is saved)", False)

exit(gen.generate(PACKAGE, "versuch2_tof", "Sensor"))